# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eblFr1f6DARERcWmVsKP9Uo7B_83w03K
"""

# Import necessary libraries
import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from nltk.corpus import stopwords
import string
import re

# Authentication with Twitter API
API_KEY = 'YOUR_API_KEY'
API_SECRET_KEY = 'YOUR_API_SECRET_KEY'
ACCESS_TOKEN = 'YOUR_ACCESS_TOKEN'
ACCESS_TOKEN_SECRET = 'YOUR_ACCESS_TOKEN_SECRET'

# Authenticate to Twitter
auth = tweepy.OAuth1UserHandler(consumer_key=API_KEY, consumer_secret=API_SECRET_KEY,
                                access_token=ACCESS_TOKEN, access_token_secret=ACCESS_TOKEN_SECRET)
api = tweepy.API(auth)

# Function to get tweets from Twitter
def get_tweets(query, count=100):
    tweets = tweepy.Cursor(api.search_tweets, q=query, lang="en", tweet_mode='extended').items(count)
    tweet_data = []
    for tweet in tweets:
        tweet_data.append(tweet.full_text)
    return tweet_data

# Function to clean the text
def clean_text(text):
    text = re.sub(r'http\S+', '', text)  # Remove URLs
    text = re.sub(r'@[A-Za-z0-9_]+', '', text)  # Remove @ mentions
    text = re.sub(r'#', '', text)  # Remove hashtags
    text = re.sub(r'RT[\s]+', '', text)  # Remove Retweets
    text = re.sub(r'\n', ' ', text)  # Remove newlines
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = text.lower()  # Convert to lowercase
    return text

# Function to perform sentiment analysis using TextBlob
def get_sentiment(text):
    analysis = TextBlob(text)
    # Return sentiment polarity
    return analysis.sentiment.polarity

# Function to visualize the word cloud
def create_wordcloud(text_data):
    # Join all the tweets into one string
    text = ' '.join(text_data)
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
    plt.figure(figsize=(10, 6))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.show()

# Function to plot the sentiment distribution
def plot_sentiment_distribution(sentiments):
    sns.set(style="whitegrid")
    plt.figure(figsize=(10, 6))
    sns.histplot(sentiments, kde=True, bins=30, color='blue', edgecolor='black')
    plt.title("Sentiment Distribution (Polarity)", fontsize=16)
    plt.xlabel('Sentiment Polarity', fontsize=12)
    plt.ylabel('Frequency', fontsize=12)
    plt.show()

# Main code to get tweets, clean, and analyze sentiment
query = 'Tesla'  # You can change this to the brand/product/topic you want
tweet_count = 200  # Number of tweets to fetch

# Get tweets using the Twitter API
tweets = get_tweets(query, count=tweet_count)

# Clean the tweets and analyze sentiment
cleaned_tweets = [clean_text(tweet) for tweet in tweets]
sentiments = [get_sentiment(tweet) for tweet in cleaned_tweets]

# Displaying the sentiment of the first 10 tweets for illustration
for i in range(10):
    print(f"Tweet {i+1}: {cleaned_tweets[i]}")
    print(f"Sentiment: {sentiments[i]}\n")

# Plotting the sentiment distribution
plot_sentiment_distribution(sentiments)

# Visualizing the Word Cloud
create_wordcloud(cleaned_tweets)

# Analyzing sentiment as Positive, Neutral, Negative
def analyze_sentiment_classification(sentiments):
    sentiment_class = []
    for sentiment in sentiments:
        if sentiment > 0:
            sentiment_class.append("Positive")
        elif sentiment == 0:
            sentiment_class.append("Neutral")
        else:
            sentiment_class.append("Negative")
    return sentiment_class

# Get sentiment classifications
sentiment_class = analyze_sentiment_classification(sentiments)

# Visualize the sentiment classification distribution
plt.figure(figsize=(8, 6))
sns.countplot(x=sentiment_class, palette="coolwarm")
plt.title("Sentiment Classification: Positive, Neutral, Negative", fontsize=16)
plt.xlabel('Sentiment', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.show()